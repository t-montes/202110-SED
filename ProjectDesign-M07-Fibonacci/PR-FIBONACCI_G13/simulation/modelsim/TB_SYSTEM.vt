/*######################################################################
//#	G0B1T: HDL EXAMPLES. 2018.
//######################################################################
//# Copyright (C) 2018. F.E.Segura-Quijano (FES) fsegura@uniandes.edu.co
//# 
//# This program is free software: you can redistribute it and/or modify
//# it under the terms of the GNU General Public License as published by
//# the Free Software Foundation, version 3 of the License.
//#
//# This program is distributed in the hope that it will be useful,
//# but WITHOUT ANY WARRANTY; without even the implied warranty of
//# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//# GNU General Public License for more details.
//#
//# You should have received a copy of the GNU General Public License
//# along with this program.  If not, see <http://www.gnu.org/licenses/>
//####################################################################*/
`timescale 1 ns/ 1 ns
module TB_SYSTEM();
// constants                                           
// ============================================
// Parameter ( may differ for physical synthesis)
// ============================================
	// general purpose registers
	reg eachvec;
	parameter TCK = 20; // clock period in ns
	parameter CLK_FREQ = 1000000000 / TCK; // Frequenzy in HZ
	parameter DATAWIDTH_BUS = 8;

	// test vector input registers
// ============================================
// INTERNAL WIRE AND REG DECLARATIONS
// ============================================
	// wires (OUTPUTS)
	wire [DATAWIDTH_BUS-1:0] TB_SYSTEM_data_OutBUS;
	// reg (INPUTS)
	reg TB_SYSTEM_CLOCK_50;
	reg TB_SYSTEM_RESET_InHigh;

	// assign statements (if any)                          
	BB_SYSTEM BB_SYSTEM_u0 (
	// port map - connection between master ports and signals/registers   
		.BB_SYSTEM_data_OutBUS(TB_SYSTEM_data_OutBUS),
		.BB_SYSTEM_CLOCK_50(TB_SYSTEM_CLOCK_50),
		.BB_SYSTEM_RESET_InHigh(TB_SYSTEM_RESET_InHigh)
	);
initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin                          
	TB_SYSTEM_CLOCK_50 <= 0;
// --> end                                             
$display("Running testbench");                       
end                                                    
always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
	#(TCK/2) TB_SYSTEM_CLOCK_50 <= ~ TB_SYSTEM_CLOCK_50;
initial begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin     
                    
	#0 		TB_SYSTEM_RESET_InHigh <= 1'b1;
	#60000 	TB_SYSTEM_RESET_InHigh <= 1'b0;	
	#60000 	TB_SYSTEM_RESET_InHigh <= 1'b0;	
	//#(TCK*10000) $finish;	
@eachvec;
$finish;                                              
// --> end                                             
end                                                    
endmodule

